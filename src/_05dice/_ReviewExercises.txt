#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################
R10.5 Events
    Q: What is an event object? An event source? An event listener?

    A: an event in Java is an object created when something changes within a GUI. If a user clicks on a button or types characters
    into a field, an event triggers the relevant event object. An event source is the UI component ,suh as button. Event listener receives
    events.


R10.6 actionPerformed
    Q: Who calls the actionPerformed method of an event listener? When does the call to the actionPerformed method occur?

    actionPerformed method is declared in ActionListener interface (just method's signature but no body).
    In other words, a class implements ActionListener and I have to define what actionPerformed method does in a class.
    Once the listener class is declared, we need to construct an object of the class and it to a action source.
    For instance, we can add the listener class to a button. When the button is clicked, the Java event handling library calls actionPerformed

    ActionListener listener = new ClickListener();
    button.addActionListener(listener);

    when button is clicked the following is called.
    listener.actionPerformed

R10.11 Inner class and event-listeners
    Q: Why are we using inner classes for event listeners? If Java did not have inner classes, could we still implement event listeners? How?

    A: Inner classes are useful because event listeners' methods can access instance variables and methods of the surrounding class.
    In other words, it allows the inner class to access variables without having to receive them as constructor or method arguments.
    We can still implement event listeners without inner classes. First, we have a event listener as a regular. Second, we import the listener class
    to the frame(?) class. Third, we instatiate a listener class. Fourth, we add the listener object to a action source using addActionListner().
    Quite cumbersome.


R10.14 Object hierarchies
    Q: Name a method that is declared in JTextArea, a method that JTextArea inherits from JTextComponent,
    and a method that JTextArea inherits from JComponent.

    A:JTextArea inherits setText() and setEditable() methods from JTextComponent.
      append() method which adds text to the end of a text area is delcared in JTextArea.
      add() method which adds a specified component to a container is inherited from JComponent.


R10.22 Graphic methods
    Q: How would you modify the drawItalianFlag method in How To 10.1 to draw any flag with a white vertical stripe
    in the middle and two arbitrary colors to the left and right?

    A: please refer to the code below. The idea is to create a Color object based on randomized RGB numbers ranging from 0 to 255.
        We can pass the two randomized color to drawItalianFlag() method. random_color() returns a Color object whose color is randomized.
        I wrote it as a static method so that it can be called wihthin the method call of drawItalianFlag().


            public class ItalianFlagComponent extends JComponent {

                private Color c1 = Color.green;
                private Color c2 = Color.red;

                public void paintComponent(Graphics g)
                {

                    drawItalianFlag(g, 10, 10, 100, random_color(), random_color());
                    //drawItalianFlag(g, 10, 125, 150);
                }

                public static Color random_color(){
                    int r, g, b;
                    Random myRandom = new Random();
                    r = myRandom.nextInt(256);
                    g = myRandom.nextInt(256);
                    b = myRandom.nextInt(256);

                    return new Color(r,g,b);
                }


                void drawItalianFlag(Graphics g, int xLeft, int yTop, int width, Color c1, Color c2 )
                {
                    g.setColor(c1);
                    g.fillRect(xLeft, yTop, width / 3, width * 2 / 3);

                    g.setColor(c2);
                    g.fillRect(xLeft + 2 * width / 3, yTop, width / 3, width * 2 / 3);
                    g.setColor(Color.BLACK);
                    g.drawLine(xLeft + width / 3, yTop, xLeft + width * 2 / 3, yTop);
                    g.drawLine(xLeft + width / 3, yTop + width * 2 / 3,
                                xLeft + width * 2 / 3, yTop + width * 2 / 3);
                }
            }

R11.2 Layout managers
    Q: What is the advantage of a layout manager over telling the container “place this component at position (x, y)”?

    A: placement of each component in a container is more automatic. You don't have to specify a specific position,
    which can be very difficult given that a width or a height of a container could be comprised of thousands of pixels.
    explicitly stating a coordinate requires too much precision unccessarily.

R11.11 ButtonGroup
    Q: Why do you need a button group for radio buttons but not for check boxes?

    A: Button group for radio buttons is required because radio buttons are sued for mutually exclusive selection.
    When one radio button is selected, we need to make sure unselected another radio button that was previously selected.
    On the other hand, check boxes, usually drawn in squares, are used for non-mutually exclusive selection.

R11.19 Types of Events
    Q: What is the difference between an ActionEvent and a MouseEvent?

    A: ActionEven is a semantic event which indicates that a component-defined action occurred. It's a high-level event
    generated by component, such as a Button, when the component specific action occurs, such as being pressed. The event is
    passed to ActionListener object added to the component.

    On the other hand, a MouseEvent is an event that indicates that a mouse action occured in a component. It occurs in a particular
    component if and only if the mouse cursor is over the unobscured part of the component's bounds when the action happens. A MouseEvent
    is enabled by MouseListener or MouseMotionListener.

R11.20 Events
    Q: What information does an action event object carry? What additional information does a mouse event object carry?
    Hint: Check the API documentation.

    A: ActionEvent carries 7 instances variables, including ACTION_FIRST, ACTION_LAST, ACTION_PERFORMED, ALT_MASK, CTRL_MASK, META_MASK, SHIFT_MASK
    Similarly, MouseEvent carries the following fields.

        MOUSE_FIRST  - The first number in the range of ids used for mouse events.
        MOUSE_LAST   - The last number in the range of ids used for mouse events.
        MOUSE_CLICKED   - occurs when a mouse button is pressed and released.
        MOUSE_PRESSED - occurs when a mouse button is pushed down.
        MOUSE_RELEASED  - occurs when a mouse button is let up.
        MOUSE_MOVED    - occurs when the mouse position changes.
        MOUSE_ENTERED    - occurs when the mouse cursor enters the unobscured part of component's geometry
        MOUSE_EXITED  - occurs when the mouse cursor exits the unobscured part of component's geomtery
        MOUSE_DRAGGED   - occurs when the mouse position changes while a mouse button is pressed.
        MOUSE_WHEEL     - It occurs when a mouse equipped with a wheel has its wheel rotated.
        NOBUTTON - Indicates no mouse buttons;
        BUTTON1 -  Indicates mouse button #1;
        BUTTON2  - Indicates mouse button #2
        BUTTON3 - Indicates mouse button #3;


R11.21 ActionListener versus MouseListener
    Q: Why does the ActionListener interface have only one method, whereas the MouseListener has five methods?






