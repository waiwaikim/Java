x#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

R5.6 Parameters and return values.  The difference between an argument and a return value is that an argument is passed
into a method, whereas a return value is the value returned from it.

You can have n number of arguments, whereas you can only have one return value. By varying either the number and/or type of arguments,
you change the method's signature, which means you may overload a method. Varying the return value only does not change the
method's signature and therefore does not qualify the method for overloading.

Since Java5, you can even specify a variable number of arguments aka varargs which looks something like this:
 private String[] someMethod(int nGrade, String... strNickNames) {//implementation};
Notice that the varargs parameter "String... strNickNames" must be listed last.  Calling this method would look something like this:
 String[] strReturnValues = someMethod(99, "Jim", "Jamie", "James", "Jamey", "Jimmy", "Jimbo");

R5.8 Pseudocode
//my pseudocode has two methods. The first method takes a character as input and returns a number.
The second method takes a telephone number as an input, calls the first method over the length of the input,
and returns a numeric telephone number

    def int char_to_num(String c){
        if( c in ["a","b","c"] );  returns 2;
        // consider single quote as duuble quotes
        elif( c in ['d','e','f'] );  returns 3;
        elif( c in ['g','h','i'] );  returns 4;
        elif( c in ['j','k','l'] );  returns 5;
        elif( c in ['m','n','o'] );  returns 6;
        elif( c in ['p','q','r','s'] );  returns 7;
        elif( c in ['t','u','v'] );  returns 8;
        elif( c in ['w','x','y','z'] );  returns 9;
        else pass;
    }

    def phone_num_convert(String phone){
        String return_num ="";

        for (int i=0; i<phone.lenth(); i++){
            if ( phone[i] in ("1", "0", "-") ); return_num += phone[i];
            else (
                return_num += char_to_num(phone[i]);
            )
        }
        return return_num;

    }

R5.10 Scope
The main method starts with int i = 10. 10 goes into g(). g() calls f() 10 times and append what f() returns cumulatively.
when i=0, f() returns 0. what f() returns a square root of an input and cast an integer to it. In other words, f() returns
the samllest integer of which square doesn't exceed the input. Thus, g(10) computes b = 0 + 1 + 1 + 1 + 2 + 2 + 2 + 2 + 2 +3 = 16.
Lastly, the main method prints 26 = 16+10.

R5.14 Pass by value versus pass by reference
falseSwap(x, y) doesn't swap the contents of x and y because it passes the inputs by values.
x and y in the main method are outside of falseSwap's scope.

R6.3 Considering loops
    a. total = 1 + 2 + 3 + 4 + 5 + 4 + 3 + 2 + 1 + 0 = 25
    b. total = 1 + 3 + 5 + 3+ 1 = 13
    c. total = 2 + 4 + 4 + 2 + 0 = 12
    d. total = 3 + 4 + 5 + 4 + 3 + 2 + 1 + 0 = 22
    e. total = 2 + 3 + 5 + 1 = 11
    f. total = 0 + 1 + 2 + 3 + 4 + 5 + 4 + 3 + 2 + 1  = 25
    g. total = 0 + 2 + 4 + 4 + 2
    h. total
        i = 0: total = 1
        i = 1: total = 2 -1 = 1
        i = 2: total = 3 - 1 = 2
        i = 3: total = 4 - 2 = 2
        i = 4: total = 5 - 2 = 3
        i = 5: total = 4 - 3 = 1
        i = 6: total = 3 - 1 = 2
        i = 7: total = 2- 2 = 0
        i = 8: total = 1 - 0 = 1
        i = 9: total =0 - 1 = -1

R6.10 Enhanced for-loop
    a. for (int i = 0; i < values.length; i++) { total = total + values[i]; }
        //answer:
        for (float item: values){
            total += item ;
        }

    b.for (int i = 1; i < values.length; i++) { total = total + values[i]; }
        //answer:
        for (float item: values){
            if(item == values[0]) continue;
            else total += item;
        }

    c. for (int i = 0; i < values.length; i++)
       {
          if (values[i] == target) { return i; }
       }
       //answer:
       for(float item: values){
            if (item == target) { return true; } }
       }

R6.23 Computing runs

    def computer_run(int[] array){
        int max_count = current_count = 0 ;
        int prev = array[0];

        for(int item: array){
            if (item == prev) {
                current_count++;
            }
            else{
                current_count = 0;
                prev = item;
            }

            if(current_count > max_count){max_count=current_count;}
        }
        return max_count;
    }

R6.29 Multi-dimensional arrays
•Fill all entries with 0.

        // you don't have to explicitly declare all elements to be 0 because
        // thy are initialized to be 0
        // but here's one way to do it by iterating each element in the matrix

       for (int i=0; i<rows; i++){
           for(int j=0; j<columns; j++){
               values[i][j]=0;
           }
       }

•Fill elements alternately with 0s and 1s in a checkerboard pattern.
       boolean flag = true;
        for (int i=0; i<rows; i++){
            for(int j=0; j<columns; j++){
                if(flag){
                    values[i][j]=0;
                }
                else {
                    values[i][j]=1;
                }
                flag = !flag;
            }
        }
•Fill only the elements at the top and bottom row with zeroes.
        for (int i=0; i<rows; i++) {
            if (i == 0 || i == (rows - 1)) {
                for (int j = 0; j < columns; j++) {
                    values[i][j]=0;
                }
            }
            else{
                values[i]=null;
                //here the rest of the rows are set to null
            }
        }

•Compute the sum of all elements.
       int total_sum = 0;
       for (int i=0; i<rows; i++){
           for(int j=0; j<columns; j++){
               total_sum += values[i][j];
           }
       }

•Print the array in tabular form.
        for(int i=0; i<values.length; i++){
            System.out.println(Arrays.toString(values[i]));
        }

R6.34 Understanding arrays
    a.All elements of an array list are of the same type.
        FALSE
    b.Array list index values must be integers.
        TRUE
    c.Array lists cannot contain strings as elements.
        FALSE
    d.Array lists can change their size, getting larger or smaller.
        TRUE
    e.A method cannot return an array list.
        FALSE
    f.A method cannot change the size of an array list argument.
        FALSE

R7.1 Exceptions
    IOException - FileNotFoundException

R7.6 Throwing and catching
    When an exception is thrown, execution doesn't continue with the next statement but with an exception handler.
    When we program in try-catch and an exception is thrown in try{}, catch{} contains exception handler for a given exception

R7.7 Checked versus unchecked
    Unchecked exceptions are descendants of RuntimeException. This indicates errors in code. An example is IndexOutOfBoundsException.
    Check exceptions indicate something has gone wrong for some external reason. The compiler makes sure checked exceptions are handled.
    An exmaple of checked exceptions is IOException, such as FileNotFoundException.

    With throws Clause, you must specify all checked exceptions that a given method may throw, but you may also list unchecked exceptions

R7.8 Exceptions philosophy in Java
    IndexOutOfBoundsException is an unchecked exception, which means you or the programmer has committed an error.
    It is not compiler's job to handle such error, but the programer's.

R7.11 What is an exception object
    The catch clause can analyze the object to find out more details about the exception and why it failed.

R7.15 Scanner exceptions. Explain why these are either checked or unchecked.
    next and nextInt methods of the Scanner clas can throw IOException, such as FileNotFoundException.
    This would be a checked exception, because the file input is out of scope of the program. It really depends on the user.
